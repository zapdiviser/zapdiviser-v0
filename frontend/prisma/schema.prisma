generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  isActivated   Boolean   @default(false)

  accounts  Account[]
  sessions  Session[]
  funils    Funil[]
  redirects Redirect[]
  instances Instance[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Redirect {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  urls RedirectUrl[]
}

model RedirectUrl {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  url        String
  redirectId String
  redirect   Redirect @relation(fields: [redirectId], references: [id], onDelete: Cascade)
}

model Instance {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  funils Funil_Instance[]
}

model Funil {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  flow      Json

  user   User   @relation(fields: [userId], references: [id])
  userId String

  instances Funil_Instance[]
}

model Funil_Instance {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  funil   Funil  @relation(fields: [funilId], references: [id], onDelete: Cascade)
  funilId String

  instance   Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String
}
